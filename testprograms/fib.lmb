fib :: Int -> Int
fib 0 = 1
fib 1 = 1
fib n = (fib (n - 1)) + (fib (n - 2))

choose :: Bool -> String
choose bool
| bool = "true"
| not bool = "false"

fst :: (Bool, Bool) -> Bool
fst (l, r) = l

snd :: (Bool, Bool) -> Bool
snd (l, r) = r

seq :: String -> String -> Bool
seq l r = (l == r && l == r) && fib 18 == fib 14

not :: Bool -> Bool
not True = False
not False = True

test :: Bool
test = True

w8even :: String -> String
w8even s  = s

w7even :: Char -> Char
w7even c = 'p'

strTest :: (String, (Int, String)) -> String
strTest (l, (n, r)) = l

// This is a test
hd :: [Int] -> Int
hd [] = 0
hd [h:rest] = h

otherHd :: [Int] -> Int
otherHd l = match l:
	[] -> o
	[h:rest] -> h

tl :: [Int] -> [Int]
tl [] = []
tl [l : ls] = ls

last :: [Int] -> Int
last [] = 0
last [l : []] = l
last [l : ls] = last ls

pow :: Int -> Int -> Int
pow _ 0 = 1
pow n p = p * (pow n (p - 1))

Main :: (Int, String, String, Int)
Main = (fib 15, choose True, strTest ("bla", (15, "bleh")), hd [1 : [2:[]]])
